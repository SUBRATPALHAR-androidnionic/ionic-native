import { __decorate, __extends } from 'tslib';
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var BLE = /** @class */ (function (_super) {
  __extends(BLE, _super);
  function BLE() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  BLE.prototype.scan = function (services, seconds) {
    return cordova(this, 'scan', { observable: true }, arguments);
  };
  BLE.prototype.startScan = function (services) {
    return cordova(this, 'startScan', { observable: true, clearFunction: 'stopScan', clearWithArgs: false }, arguments);
  };
  BLE.prototype.startScanWithOptions = function (services, options) {
    return cordova(
      this,
      'startScanWithOptions',
      { observable: true, clearFunction: 'stopScan', clearWithArgs: false },
      arguments
    );
  };
  BLE.prototype.stopScan = function () {
    return cordova(this, 'stopScan', {}, arguments);
  };
  BLE.prototype.connect = function (deviceId) {
    return cordova(this, 'connect', { observable: true, clearFunction: 'disconnect', clearWithArgs: true }, arguments);
  };
  BLE.prototype.autoConnect = function (deviceId, connectCallback, disconnectCallback) {
    return cordova(this, 'autoConnect', { sync: true }, arguments);
  };
  BLE.prototype.requestMtu = function (deviceId, mtuSize) {
    return cordova(this, 'requestMtu', {}, arguments);
  };
  BLE.prototype.refreshDeviceCache = function (deviceId, timeoutMillis) {
    return cordova(this, 'refreshDeviceCache', {}, arguments);
  };
  BLE.prototype.disconnect = function (deviceId) {
    return cordova(this, 'disconnect', {}, arguments);
  };
  BLE.prototype.read = function (deviceId, serviceUUID, characteristicUUID) {
    return cordova(this, 'read', {}, arguments);
  };
  BLE.prototype.write = function (deviceId, serviceUUID, characteristicUUID, value) {
    return cordova(this, 'write', {}, arguments);
  };
  BLE.prototype.writeWithoutResponse = function (deviceId, serviceUUID, characteristicUUID, value) {
    return cordova(this, 'writeWithoutResponse', {}, arguments);
  };
  BLE.prototype.writeHexByte = function (deviceId, serviceUUID, characteristicUUID, value) {
    return cordova(this, 'writeHexByte', {}, arguments);
  };
  BLE.prototype.writeHexString = function (deviceId, serviceUUID, characteristicUUID, value) {
    return cordova(this, 'writeHexString', {}, arguments);
  };
  BLE.prototype.writeStringWithGetBytes = function (deviceId, serviceUUID, characteristicUUID, value) {
    return cordova(this, 'writeStringWithGetBytes', {}, arguments);
  };
  BLE.prototype.testWrite = function (deviceId, serviceUUID, characteristicUUID, value) {
    return cordova(this, 'testWrite', {}, arguments);
  };
  BLE.prototype.startNotification = function (deviceId, serviceUUID, characteristicUUID) {
    return cordova(
      this,
      'startNotification',
      { observable: true, destruct: true, clearFunction: 'stopNotification', clearWithArgs: true },
      arguments
    );
  };
  BLE.prototype.stopNotification = function (deviceId, serviceUUID, characteristicUUID) {
    return cordova(this, 'stopNotification', {}, arguments);
  };
  BLE.prototype.isConnected = function (deviceId) {
    return cordova(this, 'isConnected', {}, arguments);
  };
  BLE.prototype.isEnabled = function () {
    return cordova(this, 'isEnabled', {}, arguments);
  };
  BLE.prototype.startStateNotifications = function () {
    return cordova(
      this,
      'startStateNotifications',
      { observable: true, clearFunction: 'stopStateNotifications', clearWithArgs: false },
      arguments
    );
  };
  BLE.prototype.stopStateNotifications = function () {
    return cordova(this, 'stopStateNotifications', {}, arguments);
  };
  BLE.prototype.showBluetoothSettings = function () {
    return cordova(this, 'showBluetoothSettings', {}, arguments);
  };
  BLE.prototype.enable = function () {
    return cordova(this, 'enable', {}, arguments);
  };
  BLE.prototype.readRSSI = function (deviceId) {
    return cordova(this, 'readRSSI', {}, arguments);
  };
  BLE.prototype.connectedPeripheralsWithServices = function (services) {
    return cordova(this, 'connectedPeripheralsWithServices', {}, arguments);
  };
  BLE.prototype.peripheralsWithIdentifiers = function (uuids) {
    return cordova(this, 'peripheralsWithIdentifiers', {}, arguments);
  };
  BLE.prototype.bondedDevices = function () {
    return cordova(this, 'bondedDevices', {}, arguments);
  };
  BLE.prototype.isLocationEnabled = function () {
    return cordova(this, 'isLocationEnabled', {}, arguments);
  };
  BLE.pluginName = 'BLE';
  BLE.plugin = 'cordova-plugin-ble-central';
  BLE.pluginRef = 'ble';
  BLE.repo = 'https://github.com/don/cordova-plugin-ble-central';
  BLE.platforms = ['Android', 'iOS'];
  BLE = __decorate([Injectable()], BLE);
  return BLE;
})(IonicNativePlugin);
export { BLE };
//# sourceMappingURL=data:application/json;base64,
