import { __decorate, __extends } from 'tslib';
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaPropertyGet, cordovaPropertySet, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
export var BluetoothScanMode;
(function (BluetoothScanMode) {
  BluetoothScanMode[(BluetoothScanMode['SCAN_MODE_OPPORTUNISTIC'] = -1)] = 'SCAN_MODE_OPPORTUNISTIC';
  BluetoothScanMode[(BluetoothScanMode['SCAN_MODE_LOW_POWER'] = 0)] = 'SCAN_MODE_LOW_POWER';
  BluetoothScanMode[(BluetoothScanMode['SCAN_MODE_BALANCED'] = 1)] = 'SCAN_MODE_BALANCED';
  BluetoothScanMode[(BluetoothScanMode['SCAN_MODE_LOW_LATENCY'] = 2)] = 'SCAN_MODE_LOW_LATENCY';
})(BluetoothScanMode || (BluetoothScanMode = {}));
export var BluetoothMatchMode;
(function (BluetoothMatchMode) {
  BluetoothMatchMode[(BluetoothMatchMode['MATCH_MODE_AGRESSIVE'] = 1)] = 'MATCH_MODE_AGRESSIVE';
  BluetoothMatchMode[(BluetoothMatchMode['MATCH_MODE_STICKY'] = 2)] = 'MATCH_MODE_STICKY';
})(BluetoothMatchMode || (BluetoothMatchMode = {}));
export var BluetoothMatchNum;
(function (BluetoothMatchNum) {
  BluetoothMatchNum[(BluetoothMatchNum['MATCH_NUM_ONE_ADVERTISEMENT'] = 1)] = 'MATCH_NUM_ONE_ADVERTISEMENT';
  BluetoothMatchNum[(BluetoothMatchNum['MATCH_NUM_FEW_ADVERTISEMENT'] = 2)] = 'MATCH_NUM_FEW_ADVERTISEMENT';
  BluetoothMatchNum[(BluetoothMatchNum['MATCH_NUM_MAX_ADVERTISEMENT'] = 3)] = 'MATCH_NUM_MAX_ADVERTISEMENT';
})(BluetoothMatchNum || (BluetoothMatchNum = {}));
export var BluetoothCallbackType;
(function (BluetoothCallbackType) {
  BluetoothCallbackType[(BluetoothCallbackType['CALLBACK_TYPE_ALL_MATCHES'] = 1)] = 'CALLBACK_TYPE_ALL_MATCHES';
  BluetoothCallbackType[(BluetoothCallbackType['CALLBACK_TYPE_FIRST_MATCH'] = 2)] = 'CALLBACK_TYPE_FIRST_MATCH';
  BluetoothCallbackType[(BluetoothCallbackType['CALLBACK_TYPE_MATCH_LOST'] = 4)] = 'CALLBACK_TYPE_MATCH_LOST';
})(BluetoothCallbackType || (BluetoothCallbackType = {}));
var BluetoothLE = /** @class */ (function (_super) {
  __extends(BluetoothLE, _super);
  function BluetoothLE() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  BluetoothLE.prototype.initialize = function (params) {
    return cordova(this, 'initialize', { successIndex: 0, errorIndex: 2, observable: true }, arguments);
  };
  BluetoothLE.prototype.enable = function () {
    return cordova(this, 'enable', { callbackOrder: 'reverse', sync: true }, arguments);
  };
  BluetoothLE.prototype.disable = function () {
    return cordova(this, 'disable', { callbackOrder: 'reverse', sync: true }, arguments);
  };
  BluetoothLE.prototype.getAdapterInfo = function () {
    return cordova(this, 'getAdapterInfo', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.startScan = function (params) {
    return cordova(this, 'startScan', { callbackOrder: 'reverse', observable: true }, arguments);
  };
  BluetoothLE.prototype.stopScan = function () {
    return cordova(this, 'stopScan', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.retrieveConnected = function (params) {
    return cordova(this, 'retrieveConnected', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.bond = function (params) {
    return cordova(this, 'bond', { callbackOrder: 'reverse', observable: true }, arguments);
  };
  BluetoothLE.prototype.unbond = function (params) {
    return cordova(this, 'unbond', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.connect = function (params) {
    return cordova(this, 'connect', { callbackOrder: 'reverse', observable: true }, arguments);
  };
  BluetoothLE.prototype.reconnect = function (params) {
    return cordova(this, 'reconnect', { callbackOrder: 'reverse', observable: true }, arguments);
  };
  BluetoothLE.prototype.disconnect = function (params) {
    return cordova(this, 'disconnect', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.close = function (params) {
    return cordova(this, 'close', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.discover = function (params) {
    return cordova(this, 'discover', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.services = function (params) {
    return cordova(this, 'services', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.characteristics = function (params) {
    return cordova(this, 'characteristics', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.descriptors = function (params) {
    return cordova(this, 'descriptors', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.read = function (params) {
    return cordova(this, 'read', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.subscribe = function (params) {
    return cordova(this, 'subscribe', { callbackOrder: 'reverse', observable: true }, arguments);
  };
  BluetoothLE.prototype.unsubscribe = function (params) {
    return cordova(this, 'unsubscribe', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.write = function (params) {
    return cordova(this, 'write', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.writeQ = function (params) {
    return cordova(this, 'writeQ', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.writeCommandInByteArray = function (params) {
    return cordova(this, 'writeCommandInByteArray', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.readDescriptor = function (params) {
    return cordova(this, 'readDescriptor', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.writeDescriptor = function (params) {
    return cordova(this, 'writeDescriptor', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.rssi = function (params) {
    return cordova(this, 'rssi', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.mtu = function (params) {
    return cordova(this, 'mtu', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.requestConnectionPriority = function (params) {
    return cordova(this, 'requestConnectionPriority', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.isInitialized = function () {
    return cordova(this, 'isInitialized', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.isEnabled = function () {
    return cordova(this, 'isEnabled', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.isScanning = function () {
    return cordova(this, 'isScanning', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.isBonded = function (params) {
    return cordova(this, 'isBonded', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.wasConnected = function (params) {
    return cordova(this, 'wasConnected', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.isConnected = function (params) {
    return cordova(this, 'isConnected', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.isDiscovered = function (params) {
    return cordova(this, 'isDiscovered', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.hasPermission = function () {
    return cordova(this, 'hasPermission', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.requestPermission = function () {
    return cordova(this, 'requestPermission', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.isLocationEnabled = function () {
    return cordova(this, 'isLocationEnabled', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.requestLocation = function () {
    return cordova(this, 'requestLocation', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.initializePeripheral = function (params) {
    return cordova(this, 'initializePeripheral', { callbackOrder: 'reverse', observable: true }, arguments);
  };
  BluetoothLE.prototype.addService = function (params) {
    return cordova(this, 'addService', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.removeService = function (params) {
    return cordova(this, 'removeService', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.removeAllServices = function () {
    return cordova(this, 'removeAllServices', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.startAdvertising = function (params) {
    return cordova(this, 'startAdvertising', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.stopAdvertising = function () {
    return cordova(this, 'stopAdvertising', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.isAdvertising = function () {
    return cordova(this, 'isAdvertising', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.respond = function (params) {
    return cordova(this, 'respond', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.notify = function (params) {
    return cordova(this, 'notify', { callbackOrder: 'reverse' }, arguments);
  };
  BluetoothLE.prototype.encodedStringToBytes = function (value) {
    return cordova(this, 'encodedStringToBytes', { sync: true }, arguments);
  };
  BluetoothLE.prototype.bytesToEncodedString = function (value) {
    return cordova(this, 'bytesToEncodedString', { sync: true }, arguments);
  };
  BluetoothLE.prototype.stringToBytes = function (value) {
    return cordova(this, 'stringToBytes', { sync: true }, arguments);
  };
  BluetoothLE.prototype.bytesToString = function (value) {
    return cordova(this, 'bytesToString', { sync: true }, arguments);
  };
  Object.defineProperty(BluetoothLE.prototype, 'SCAN_MODE_OPPORTUNISTIC', {
    get: function () {
      return cordovaPropertyGet(this, 'SCAN_MODE_OPPORTUNISTIC');
    },
    set: function (value) {
      cordovaPropertySet(this, 'SCAN_MODE_OPPORTUNISTIC', value);
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(BluetoothLE.prototype, 'SCAN_MODE_LOW_POWER', {
    get: function () {
      return cordovaPropertyGet(this, 'SCAN_MODE_LOW_POWER');
    },
    set: function (value) {
      cordovaPropertySet(this, 'SCAN_MODE_LOW_POWER', value);
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(BluetoothLE.prototype, 'SCAN_MODE_BALANCED', {
    get: function () {
      return cordovaPropertyGet(this, 'SCAN_MODE_BALANCED');
    },
    set: function (value) {
      cordovaPropertySet(this, 'SCAN_MODE_BALANCED', value);
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(BluetoothLE.prototype, 'SCAN_MODE_LOW_LATENCY', {
    get: function () {
      return cordovaPropertyGet(this, 'SCAN_MODE_LOW_LATENCY');
    },
    set: function (value) {
      cordovaPropertySet(this, 'SCAN_MODE_LOW_LATENCY', value);
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(BluetoothLE.prototype, 'MATCH_MODE_AGGRESSIVE', {
    get: function () {
      return cordovaPropertyGet(this, 'MATCH_MODE_AGGRESSIVE');
    },
    set: function (value) {
      cordovaPropertySet(this, 'MATCH_MODE_AGGRESSIVE', value);
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(BluetoothLE.prototype, 'MATCH_MODE_STICKY', {
    get: function () {
      return cordovaPropertyGet(this, 'MATCH_MODE_STICKY');
    },
    set: function (value) {
      cordovaPropertySet(this, 'MATCH_MODE_STICKY', value);
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(BluetoothLE.prototype, 'MATCH_NUM_ONE_ADVERTISEMENT', {
    get: function () {
      return cordovaPropertyGet(this, 'MATCH_NUM_ONE_ADVERTISEMENT');
    },
    set: function (value) {
      cordovaPropertySet(this, 'MATCH_NUM_ONE_ADVERTISEMENT', value);
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(BluetoothLE.prototype, 'MATCH_NUM_FEW_ADVERTISEMENT', {
    get: function () {
      return cordovaPropertyGet(this, 'MATCH_NUM_FEW_ADVERTISEMENT');
    },
    set: function (value) {
      cordovaPropertySet(this, 'MATCH_NUM_FEW_ADVERTISEMENT', value);
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(BluetoothLE.prototype, 'MATCH_NUM_MAX_ADVERTISEMENT', {
    get: function () {
      return cordovaPropertyGet(this, 'MATCH_NUM_MAX_ADVERTISEMENT');
    },
    set: function (value) {
      cordovaPropertySet(this, 'MATCH_NUM_MAX_ADVERTISEMENT', value);
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(BluetoothLE.prototype, 'CALLBACK_TYPE_ALL_MATCHES', {
    get: function () {
      return cordovaPropertyGet(this, 'CALLBACK_TYPE_ALL_MATCHES');
    },
    set: function (value) {
      cordovaPropertySet(this, 'CALLBACK_TYPE_ALL_MATCHES', value);
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(BluetoothLE.prototype, 'CALLBACK_TYPE_FIRST_MATCH', {
    get: function () {
      return cordovaPropertyGet(this, 'CALLBACK_TYPE_FIRST_MATCH');
    },
    set: function (value) {
      cordovaPropertySet(this, 'CALLBACK_TYPE_FIRST_MATCH', value);
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(BluetoothLE.prototype, 'CALLBACK_TYPE_MATCH_LOST', {
    get: function () {
      return cordovaPropertyGet(this, 'CALLBACK_TYPE_MATCH_LOST');
    },
    set: function (value) {
      cordovaPropertySet(this, 'CALLBACK_TYPE_MATCH_LOST', value);
    },
    enumerable: true,
    configurable: true,
  });
  BluetoothLE.pluginName = 'BluetoothLE';
  BluetoothLE.plugin = 'cordova-plugin-bluetoothle';
  BluetoothLE.pluginRef = 'bluetoothle';
  BluetoothLE.repo = 'https://github.com/randdusing/cordova-plugin-bluetoothle';
  BluetoothLE.install = 'ionic cordova plugin add cordova-plugin-bluetoothle';
  BluetoothLE.installVariables = [];
  BluetoothLE.platforms = ['Android', 'iOS'];
  BluetoothLE = __decorate([Injectable()], BluetoothLE);
  return BluetoothLE;
})(IonicNativePlugin);
export { BluetoothLE };
//# sourceMappingURL=data:application/json;base64,
